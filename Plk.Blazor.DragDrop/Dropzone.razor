@typeparam TItem
@inject DragDropService<TItem> DragDropService
@using System.Text
@using Plk.Blazor.DragDrop.DropActions
@implements IDisposable

<div class="@GetClassesForDropzone()" @ondragover:preventDefault @ondragover="()=> { }" @ondragenter:preventDefault @ondragenter="()=> { }" @ondrop="()=>OnDrop()" @ondrop:preventDefault ondragstart="event.dataTransfer.setData('text', event.target.id);" 
     @ondrop:stopPropagation 
     @ondragenter:stopPropagation
     @ondragend:stopPropagation
     @ondragover:stopPropagation
     @ondragleave:stopPropagation
     @ondragstart:stopPropagation>

    @foreach (var item in Items)
    {

        if (Items.IndexOf(item) == 0 && MaxItems == null || MaxItems > 1)
        {
            <div @ondrop="()=>OnDropItemOnSpacing(0)" @ondrop:stopPropagation @ondragenter="()=>DragDropService.ActiveSpacerId =  0" @ondragleave="()=>DragDropService.ActiveSpacerId = null" class="@GetClassesForSpacing(0)"></div>
        }

        <div draggable="@IsItemDragable(item)"
             @ondragstart="()=>OnDragStart(item)"
             @ondragend="()=>OnDragEnd()"
             @ondragenter="()=>OnDragEnter(item)"
             @ondragleave="()=>OnDragLeave()"
             class="@GetClassesForDraggable(item) @CheckIfItemIsInTransit(item) @CheckIfItemIsDragTarget(item) @CheckIfDragOperationIsInProgess() @CheckIfDraggable(item)">

            @{
                if (ChildContent != null)
                {
                    @ChildContent(item);
                }
            }

        </div>

        @if (MaxItems == null || MaxItems > 1)
        {
            <div @ondrop="()=>OnDropItemOnSpacing(Items.IndexOf(item)+1)" @ondrop:stopPropagation @ondragenter="()=>DragDropService.ActiveSpacerId = Items.IndexOf(item)+1" @ondragleave="()=>DragDropService.ActiveSpacerId = null" class="@CheckIfDragOperationIsInProgess() @GetClassesForSpacing(Items.IndexOf(item)+1)"></div>
        }
    }

</div>

<CascadingValue Value="this">
    @if(DropActions != null)
    {
        @DropActions
    }
</CascadingValue>

@code {

    private async Task OnDropItemOnSpacing(int newIndex)
    {
        if (!IsDropAllowed())
        {
            DragDropService.Reset();
            return;
        }

        var activeItem = DragDropService.ActiveItem;

        var dropActionContext = new DropActionContext<TItem>
        {
            Sender = this,
            ActiveItem = activeItem,
            SourceItems = DragDropService.Items,
            TargetItems = Items,
            TargetItemIndex = newIndex
        };

        var suitableDropActions = _registeredDropActions.Where(a => a.IsSuitable != null && a.IsSuitable(dropActionContext));

        foreach (var suitableDropAction in suitableDropActions)
            suitableDropAction.Execute(dropActionContext);

        //Operation is finished
        DragDropService.Reset();
        await OnItemDrop.InvokeAsync(activeItem);
    }

    private bool IsMaxItemLimitReached()
    {
        var activeItem = DragDropService.ActiveItem;

        return (!Items.Contains(activeItem) && MaxItems.HasValue && MaxItems == Items.Count());
    }

    private string IsItemDragable(TItem item)
    {
        if (AllowsDrag == null) return "true";
        if (item == null) return "false";

        return AllowsDrag(item).ToString();
    }

    private bool IsItemAccepted(TItem dragTargetItem)
    {
        if (Accepts == null) return true;

        return Accepts(DragDropService.ActiveItem, dragTargetItem);
    }

    private bool IsValidItem()
    {
        return DragDropService.ActiveItem != null;
    }

    protected override bool ShouldRender()
    {
        return DragDropService.ShouldRender;
    }

    private void ForceRender(object sender, EventArgs e)
    {
        StateHasChanged();
    }


    protected override void OnInitialized()
    {
        DragDropService.StateHasChanged += ForceRender;

        base.OnInitialized();
    }

    public string CheckIfDraggable(TItem item)
    {
        if (AllowsDrag == null) return "";
        if (item == null) return "";

        if (AllowsDrag(item)) return "";

        return "plk-dd-noselect";
    }
    public string CheckIfDragOperationIsInProgess()
    {
        var activeItem = DragDropService.ActiveItem;

        return activeItem == null ? "" : "plk-dd-inprogess";
    }

    public void OnDragEnd()
    {
        if (DragEnd != null)
        {
            DragEnd(DragDropService.ActiveItem);
        }

        DragDropService.Reset();
        //dragTargetItem = default;
    }

    public void OnDragEnter(TItem item)
    {
        var activeItem = DragDropService.ActiveItem;

        if (item.Equals(activeItem)) return;

        if (!IsValidItem()) return;

        if (IsMaxItemLimitReached()) return;

        if (!IsItemAccepted(item)) return;

        DragDropService.DragTargetItem = item;

        if (InstantReplace)
        {
            Swap(DragDropService.DragTargetItem, activeItem);
        }

        DragDropService.ShouldRender = true;
        StateHasChanged();
        DragDropService.ShouldRender = false;
    }

    public void OnDragLeave()
    {
        DragDropService.DragTargetItem = default;

        DragDropService.ShouldRender = true;
        StateHasChanged();
        DragDropService.ShouldRender = false;
    }

    public void OnDragStart(TItem item)
    {
        DragDropService.ShouldRender = true;
        DragDropService.ActiveItem = item;
        DragDropService.Items = Items;
        StateHasChanged();
        DragDropService.ShouldRender = false;
    }

    public string CheckIfItemIsInTransit(TItem item)
    {
        return item.Equals(DragDropService.ActiveItem) ? "plk-dd-in-transit no-pointer-events" : "";
    }

    public string CheckIfItemIsDragTarget(TItem item)
    {
        if (item.Equals(DragDropService.ActiveItem)) return "";

        if (item.Equals(DragDropService.DragTargetItem))
        {
            return IsItemAccepted(DragDropService.DragTargetItem) ? "plk-dd-dragged-over" : "plk-dd-dragged-over-denied";
        }

        return "";
    }

    private string GetClassesForDraggable(TItem item)
    {
        var builder = new StringBuilder();

        builder.Append("plk-dd-draggable");

        if (ItemWrapperClass != null)
        {
            var itemWrapperClass = ItemWrapperClass(item);

            builder.AppendLine(" " + itemWrapperClass);
        }

        return builder.ToString();
    }

    private string GetClassesForDropzone()
    {
        var builder = new StringBuilder();

        builder.Append("plk-dd-dropzone");

        if (!String.IsNullOrEmpty(Class))
        {
            builder.AppendLine(" " + Class);
        }

        return builder.ToString();
    }

    private string GetClassesForSpacing(int spacerId)
    {
        var builder = new StringBuilder();

        builder.Append("plk-dd-spacing");

        //if active space id and item is from another dropzone -> always create insert space
        if (DragDropService.ActiveSpacerId == spacerId && Items.IndexOf(DragDropService.ActiveItem) == -1)
        {
            builder.Append(" plk-dd-spacing-dragged-over");
        } // else -> check if active space id and that it is an item that needs space
        else if (DragDropService.ActiveSpacerId == spacerId && (spacerId != Items.IndexOf(DragDropService.ActiveItem)) && (spacerId != Items.IndexOf(DragDropService.ActiveItem) + 1))
        {
            builder.Append(" plk-dd-spacing-dragged-over");
        }

        return builder.ToString();
    }

    /// <summary>
    /// Allows to pass a delegate which executes if something is dropped and decides if the item is accepted
    /// </summary>
    [Parameter] public Func<TItem, TItem, bool> Accepts { get; set; }


    /// <summary>
    /// Allows to pass a delegate which executes if something is dropped and decides if the item is accepted
    /// </summary>
    [Parameter] public Func<TItem, bool> AllowsDrag { get; set; }

    /// <summary>
    /// Allows to pass a delegate which executes if a drag operation ends
    /// </summary>
    [Parameter] public Action<TItem> DragEnd { get; set; }

    /// <summary>
    /// Raises a callback with the dropped item as parameter in case the item can not be dropped due to the given Accept Delegate
    /// </summary>
    [Parameter] public EventCallback<TItem> OnItemDropRejected { get; set; }

    /// <summary>
    /// Raises a callback with the dropped item as parameter
    /// </summary>
    [Parameter] public EventCallback<TItem> OnItemDrop { get; set; }

    /// <summary>
    /// Raises a callback with the replaced item as parameter
    /// </summary>
    [Parameter] public EventCallback<TItem> OnReplacedItemDrop { get; set; }

    /// <summary>
    /// If set to true, items will we be swapped/inserted instantly.
    /// </summary>
    [Parameter] public bool InstantReplace { get; set; }

    /// <summary>
    /// List of items for the dropzone
    /// </summary>
    [Parameter] public IList<TItem> Items { get; set; }

    /// <summary>
    /// Maximum Number of items which can be dropped in this dropzone. Defaults to null which means unlimited.
    /// </summary>
    [Parameter] public int? MaxItems { get; set; }

    /// <summary>
    /// Raises a callback with the dropped item as parameter in case the item can not be dropped due to item limit.
    /// </summary>
    [Parameter] public EventCallback<TItem> OnItemDropRejectedByMaxItemLimit { get; set; }

    /// <summary>
    /// Use this property to register drop actions in Dropzone.
    /// </summary>
    [Parameter] public RenderFragment DropActions { get; set; }

    private IList<IDropAction<TItem>> _registeredDropActions = new List<IDropAction<TItem>>();

    internal void RegisterDropAction(IDropAction<TItem> dropAction)
    {
      _registeredDropActions.Add(dropAction);
    }

    internal void DeregisterDropAction(IDropAction<TItem> dropAction)
    {
      _registeredDropActions.Remove(dropAction);
    }

    [Parameter] public RenderFragment<TItem> ChildContent { get; set; }

    /// <summary>
    /// Specifies one or more classnames for the Dropzone element.
    /// </summary>
    [Parameter] public string Class { get; set; }

    /// <summary>
    /// Specifies the id for the Dropzone element.
    /// </summary>
    [Parameter] public string Id { get; set; }

    /// <summary>
    /// Allows to pass a delegate which specifies one or more classnames for the draggable div that wraps your elements.
    /// </summary>
    [Parameter] public Func<TItem, string> ItemWrapperClass { get; set; }

    private bool IsDropAllowed()
    {
        var activeItem = DragDropService.ActiveItem;

        if (!IsValidItem())
        {
            return false;
        }

        if (IsMaxItemLimitReached())
        {
            OnItemDropRejectedByMaxItemLimit.InvokeAsync(activeItem);
            return false;
        }

        if (!IsItemAccepted(DragDropService.DragTargetItem))
        {
            OnItemDropRejected.InvokeAsync(activeItem);
            return false;
        }

        return true;
    }

    private async Task OnDrop()
    {
        DragDropService.ShouldRender = true;

        if (!IsDropAllowed())
        {
            DragDropService.Reset();
            return;
        }

        var activeItem = DragDropService.ActiveItem;

        if (!InstantReplace)
        {
            var dropActionContext = new DropActionContext<TItem>
            {
                Sender = this,
                ActiveItem = activeItem,
                SourceItems = DragDropService.Items,
                TargetItems = Items
            };

            var suitableDropActions = _registeredDropActions.Where(a => a.IsSuitable != null && a.IsSuitable(dropActionContext));

            foreach (var suitableDropAction in suitableDropActions)
                suitableDropAction.Execute(dropActionContext);
        }

        DragDropService.Reset();

        StateHasChanged();

        await OnItemDrop.InvokeAsync(activeItem);
    }

    private void Swap(TItem draggedOverItem, TItem activeItem)
    {
        var indexDraggedOverItem = Items.IndexOf(draggedOverItem);
        var indexActiveItem = Items.IndexOf(activeItem);

        if (indexActiveItem == -1) // item is new to the dropzone
        {
            //insert into new zone
            Items.Insert(indexDraggedOverItem + 1, activeItem);
            //remove from old zone
            DragDropService.Items.Remove(activeItem);
        }
        else if (InstantReplace) //swap the items
        {
            if (indexDraggedOverItem == indexActiveItem) return;
            TItem tmp = Items[indexDraggedOverItem];
            Items[indexDraggedOverItem] = Items[indexActiveItem];
            Items[indexActiveItem] = tmp;
            OnReplacedItemDrop.InvokeAsync(Items[indexActiveItem]);
        }
        else //no instant replace, just insert it after 
        {
            if (indexDraggedOverItem == indexActiveItem) return;
            var tmp = Items[indexActiveItem];
            Items.RemoveAt(indexActiveItem);
            Items.Insert(indexDraggedOverItem, tmp);
        }

    }

    public void Dispose()
    {
        DragDropService.StateHasChanged -= ForceRender;
    }
}
