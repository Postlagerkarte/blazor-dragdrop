@typeparam TItem
@inject DragDropService<TItem> DragDropService
@using System.Text
@implements IDisposable

<div class="@GetClassesForDropzone()" @ondragover:preventDefault @ondragover="()=> { }" @ondragenter:preventDefault @ondragenter="()=> { }" @ondrop="()=>OnDrop()" @ondrop:preventDefault ondragstart="event.dataTransfer.setData('text', event.target.id);" 
     @ondrop:stopPropagation 
     @ondragenter:stopPropagation
     @ondragend:stopPropagation
     @ondragover:stopPropagation
     @ondragleave:stopPropagation
     @ondragstart:stopPropagation>

    @foreach (var item in Items)
    {

        if (Items.IndexOf(item) == 0 && MaxItems == null || MaxItems > 1)
        {
            <div @ondrop="()=>OnDropItemOnSpacing(0)" @ondrop:stopPropagation @ondragenter="()=>DragDropService.ActiveSpacerId =  0" @ondragleave="()=>DragDropService.ActiveSpacerId = null" class="@GetClassesForSpacing(0)"></div>
        }

        <div draggable="@IsItemDragable(item)"
             @ondragstart="()=>OnDragStart(item)"
             @ondragend="()=>OnDragEnd()"
             @ondragenter="()=>OnDragEnter(item)"
             @ondragleave="()=>OnDragLeave()"
             class="@GetClassesForDraggable(item) @CheckIfItemIsInTransit(item) @CheckIfItemIsDragTarget(item) @CheckIfDragOperationIsInProgess() @CheckIfDraggable(item)">

            @{
                if (ChildContent != null)
                {
                    @ChildContent(item);
                }
            }

        </div>

        @if (MaxItems == null || MaxItems > 1)
        {
            <div @ondrop="()=>OnDropItemOnSpacing(Items.IndexOf(item)+1)" @ondrop:stopPropagation @ondragenter="()=>DragDropService.ActiveSpacerId = Items.IndexOf(item)+1" @ondragleave="()=>DragDropService.ActiveSpacerId = null" class="@CheckIfDragOperationIsInProgess() @GetClassesForSpacing(Items.IndexOf(item)+1)"></div>
        }
    }

</div>


